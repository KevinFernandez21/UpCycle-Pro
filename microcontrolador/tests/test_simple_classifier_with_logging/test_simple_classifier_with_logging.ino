/*
  TEST SIMPLE CLASSIFIER CON LOGGING DE PESO
  ==========================================
  
  Este sketch prueba el sistema SimpleClassifier v1.5 que incluye:
  - Clasificaci√≥n normal por sensores PIR
  - Control de motor y servos  
  - Display OLED
  - LOGGING DE PESO para base de datos futura
  
  Diferencia con versiones anteriores:
  - El peso NO afecta la clasificaci√≥n
  - El peso se lee solo para logging/estad√≠sticas
  - Flujo principal sigue siendo PIR ‚Üí Servo
  - Datos de peso quedan comentados para implementaci√≥n futura
  
  Hardware necesario:
  - ESP32
  - 3 sensores PIR (GPIO26, 27, 14)
  - Motor con transistor 2N222 (GPIO25)
  - PCA9685 para 3 servos
  - Display OLED SSD1306 (I2C)
  - 3 m√≥dulos HX711 con celdas de carga (OPCIONAL)
  
  Flujo de funcionamiento:
  1. Usuario activa modo (1, 2 o 3)
  2. PIR detecta objeto ‚Üí activa servo correspondiente
  3. Sistema lee peso del objeto (si est√° habilitado)
  4. Peso se guarda para logging futuro
  5. Clasificaci√≥n se completa normalmente
*/

// Incluir librer√≠as del proyecto
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/SimpleClassifier.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/SimpleClassifier.cpp"

// Incluir todas las dependencias
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/PIRManager.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/PIRManager.cpp"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/ConveyorMotor.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/ConveyorMotor.cpp"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/ServoManager.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro\microcontrolador\UpCyclePRO_microcontrolador\ServoManager.cpp"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/OLEDDisplay.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/OLEDDisplay.cpp"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/WeightManager.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/WeightManager.cpp"

// Incluir librer√≠a HX711 (opcional)
#include "HX711.h"

// ===============================================================================
// OBJETOS GLOBALES
// ===============================================================================

SimpleClassifier classifier;

// Variables para estad√≠sticas de logging
unsigned long totalClassifications = 0;
unsigned long weightsLogged = 0;

// ===============================================================================
// SETUP
// ===============================================================================

void setup() {
  Serial.begin(115200);
  
  Serial.println();
  Serial.println("üîÑ TEST SIMPLE CLASSIFIER v1.5 - UpCycle Pro");
  Serial.println("==============================================");
  Serial.println("‚úÖ Clasificaci√≥n por PIR (principal)");
  Serial.println("üìä + Logging de peso (futuro/opcional)");
  Serial.println();
  
  // Inicializar sistema
  if (!classifier.begin()) {
    Serial.println("‚ùå Error inicializando sistema");
    Serial.println("üîÑ Verificar conexiones y reiniciar");
    while(1) delay(1000);
  }
  
  Serial.println("‚úÖ Sistema listo para clasificaci√≥n");
  Serial.println();
  
  printInstructions();
}

// ===============================================================================
// LOOP PRINCIPAL
// ===============================================================================

void loop() {
  // Actualizar clasificador
  classifier.update();
  
  // Procesar comandos seriales
  if (Serial.available()) {
    String command = Serial.readString();
    command.trim();
    command.toLowerCase();
    
    processCommand(command);
  }
  
  delay(50);
}

// ===============================================================================
// PROCESAMIENTO DE COMANDOS
// ===============================================================================

void processCommand(String command) {
  Serial.println("üì® Comando recibido: '" + command + "'");
  
  if (command == "1") {
    Serial.println("üîµ MODO VIDRIO seleccionado");
    classifier.setMode(1);
    totalClassifications++;
    
  } else if (command == "2") {
    Serial.println("üü† MODO PLASTICO seleccionado");
    classifier.setMode(2);
    totalClassifications++;
    
  } else if (command == "3") {
    Serial.println("‚ö´ MODO METAL seleccionado");
    classifier.setMode(3);
    totalClassifications++;
    
  } else if (command == "stop") {
    Serial.println("üõë DETENIENDO SISTEMA");
    classifier.stopSystem();
    
  } else if (command == "status") {
    classifier.printStatus();
    printStats();
    
  } else if (command == "help") {
    printInstructions();
    
  // Comandos de logging de peso
  } else if (command == "weight") {
    classifier.printWeightStatus();
    
  } else if (command == "tare") {
    classifier.tareWeightSensors();
    
  } else if (command == "weight_on") {
    classifier.enableWeightValidation(true);
    Serial.println("üìä Logging de peso HABILITADO para base de datos futura");
    
  } else if (command == "weight_off") {
    classifier.enableWeightValidation(false);
    Serial.println("üì° Solo clasificaci√≥n PIR (sin logging de peso)");
    
  } else if (command == "stats") {
    printDetailedStats();
    
  } else if (command == "demo") {
    runDemo();
    
  } else {
    Serial.println("‚ùå Comando no reconocido: '" + command + "'");
    Serial.println("üí° Escribe 'help' para ver comandos disponibles");
  }
  
  Serial.println();
}

// ===============================================================================
// FUNCIONES DE INFORMACI√ìN
// ===============================================================================

void printInstructions() {
  Serial.println("üìö COMANDOS DISPONIBLES:");
  Serial.println("========================");
  Serial.println();
  Serial.println("üéØ CLASIFICACI√ìN PRINCIPAL:");
  Serial.println("  1, 2, 3       ‚Üí Activar modo de clasificaci√≥n PIR");
  Serial.println("  stop          ‚Üí Detener sistema");
  Serial.println("  status        ‚Üí Ver estado completo");
  Serial.println("  help          ‚Üí Mostrar esta ayuda");
  Serial.println();
  Serial.println("üìä LOGGING DE PESO (FUTURO):");
  Serial.println("  weight        ‚Üí Estado de celdas de carga");
  Serial.println("  tare          ‚Üí Tara de celdas");
  Serial.println("  weight_on     ‚Üí Habilitar logging de peso");
  Serial.println("  weight_off    ‚Üí Solo clasificaci√≥n PIR");
  Serial.println();
  Serial.println("üß™ DIAGN√ìSTICOS:");
  Serial.println("  stats         ‚Üí Estad√≠sticas detalladas");
  Serial.println("  demo          ‚Üí Demostraci√≥n autom√°tica");
  Serial.println();
  Serial.println("‚ú® FUNCIONAMIENTO:");
  Serial.println("  1. El sistema clasifica normalmente por PIR");
  Serial.println("  2. Los pesos se leen solo para logging");
  Serial.println("  3. No hay validaci√≥n cruzada (flujo simple)");
  Serial.println("  4. Datos quedan listos para base de datos futura");
  Serial.println();
}

void printStats() {
  Serial.println();
  Serial.println("üìä ESTAD√çSTICAS B√ÅSICAS:");
  Serial.println("========================");
  Serial.println("Clasificaciones totales: " + String(totalClassifications));
  Serial.println("Pesos registrados: " + String(weightsLogged));
  Serial.println("Sistema de peso: " + String(classifier.isWeightValidationEnabled() ? "HABILITADO" : "DESHABILITADO"));
  
  if (classifier.isWeightValidationEnabled()) {
    Serial.println("√öltimo peso: " + String(classifier.getDetectedWeight(), 3) + " kg");
  }
}

void printDetailedStats() {
  Serial.println();
  Serial.println("üìà ESTAD√çSTICAS DETALLADAS:");
  Serial.println("============================");
  
  printStats();
  classifier.printStatus();
  
  if (classifier.isWeightValidationEnabled()) {
    classifier.printWeightStatus();
  }
  
  Serial.println();
  Serial.println("üîß CONFIGURACI√ìN:");
  Serial.println("  Flujo principal: PIR ‚Üí Servo");
  Serial.println("  Peso: Solo para logging");
  Serial.println("  Validaci√≥n cruzada: DESHABILITADA");
  Serial.println("  Base de datos: PREPARADA (TODO)");
}

void runDemo() {
  Serial.println("üé¨ DEMOSTRACI√ìN DEL SISTEMA:");
  Serial.println("============================");
  Serial.println("üì± Muestra clasificaci√≥n PIR + logging opcional de peso");
  Serial.println();
  
  // Demo 1: VIDRIO
  Serial.println("üîµ DEMO VIDRIO (5 segundos)");
  classifier.setMode(1);
  delay(5000);
  classifier.stopSystem();
  delay(1000);
  
  // Demo 2: PLASTICO
  Serial.println("üü† DEMO PLASTICO (5 segundos)");
  classifier.setMode(2);
  delay(5000);
  classifier.stopSystem();
  delay(1000);
  
  // Demo 3: METAL
  Serial.println("‚ö´ DEMO METAL (5 segundos)");
  classifier.setMode(3);
  delay(5000);
  classifier.stopSystem();
  
  Serial.println("‚úÖ DEMOSTRACI√ìN COMPLETADA");
  Serial.println("üéØ Sistema listo para uso normal");
  Serial.println();
}

/*
===============================================================================
                                MANUAL DE USO
===============================================================================

üéØ OBJETIVO:
Probar el sistema UpCycle Pro v1.5 con flujo de clasificaci√≥n principal por PIR
y logging opcional de peso para base de datos futura.

üí° CONCEPTO:
- CLASIFICACI√ìN: 100% basada en sensores PIR (como versi√≥n original)
- PESO: Solo se lee para estad√≠sticas y logging futuro
- NO hay validaci√≥n cruzada que afecte la clasificaci√≥n
- Datos de peso quedan preparados para env√≠o a base de datos

üîß HARDWARE:
- ESP32
- 3 sensores PIR (GPIO26, 27, 14) - PRINCIPAL
- Motor + 2N222 (GPIO25)
- 3 servos + PCA9685
- Display OLED SSD1306 (I2C)
- 3 m√≥dulos HX711 + celdas de carga - OPCIONAL

üìã PROCEDIMIENTO DE PRUEBA:

FASE 1 - CLASIFICACI√ìN B√ÅSICA:
1. Subir sketch al ESP32
2. Abrir Monitor Serial (115200 baud)
3. Probar comandos 1, 2, 3 para activar modos
4. Verificar que PIR detecte y active servos correspondientes
5. Sistema funciona normalmente sin peso

FASE 2 - LOGGING DE PESO (OPCIONAL):
1. Conectar m√≥dulos HX711 si est√°n disponibles
2. Comando 'weight_on' para habilitar logging
3. Comando 'weight' para ver estado de celdas
4. Comando 'tare' si es necesario calibrar
5. Observar que pesos se logueen sin afectar clasificaci√≥n

FASE 3 - VERIFICACI√ìN DE FUNCIONAMIENTO:
1. Activar modo con comando '1'
2. PIR1 detecta objeto ‚Üí Servo1 se activa
3. Sistema lee peso (si est√° habilitado) 
4. Muestra "DATOS PARA LOGGING FUTURO" en serial
5. Clasificaci√≥n se completa normalmente
6. NO hay validaci√≥n cruzada

FASE 4 - ESTAD√çSTICAS:
1. Comando 'stats' para ver estad√≠sticas detalladas
2. Comando 'demo' para demostraci√≥n autom√°tica
3. Verificar que contador de clasificaciones funcione

‚úÖ RESULTADOS ESPERADOS:

FUNCIONAMIENTO NORMAL:
- Clasificaci√≥n r√°pida y eficiente por PIR
- Servos se activan seg√∫n material detectado
- Display OLED muestra estados correctos
- Sin delays adicionales por validaci√≥n

LOGGING DE PESO:
- Pesos se leen y muestran en serial
- Datos quedan preparados para base de datos
- No interfiere con flujo principal de clasificaci√≥n
- Comentarios TODO indican d√≥nde implementar env√≠o

FLEXIBILIDAD:
- Sistema funciona sin celdas de carga
- Peso se puede habilitar/deshabilitar din√°micamente
- Mantiene compatibilidad con versiones anteriores

‚ùå SOLUCI√ìN DE PROBLEMAS:

"Error inicializando celdas de carga":
- Normal si no est√°n conectadas
- Sistema contin√∫a funcionando solo con PIR
- Mensaje cambia a "sin logging de peso"

"Logging no funciona":
- Verificar que weight_on est√© ejecutado
- Comando 'weight' para diagnosticar celdas
- Usar test_hx711_weight_sensors.ino por separado

"Sistema muy lento":
- No deber√≠a pasar con esta versi√≥n
- Peso no a√±ade delays significativos
- Solo lectura r√°pida para logging

üìä VENTAJAS DE ESTA VERSI√ìN:

1. **Simplicidad**: Flujo principal sin complicaciones
2. **Velocidad**: No hay delays por validaci√≥n
3. **Flexibilidad**: Peso opcional y desactivable
4. **Futuro**: Datos listos para base de datos
5. **Compatibilidad**: Funciona sin hardware de peso

üöÄ PR√ìXIMOS PASOS:

1. Implementar funciones sendToDatabase() y logClassificationEvent()
2. Conectar a sistema MQTT para env√≠o de datos
3. Crear dashboard para visualizar estad√≠sticas de peso
4. Opcional: A√±adir an√°lisis de tendencias por tipo de material

Esta versi√≥n es ideal para producci√≥n donde se necesita clasificaci√≥n
r√°pida y confiable con opci√≥n de logging para an√°lisis posterior.

===============================================================================
*/