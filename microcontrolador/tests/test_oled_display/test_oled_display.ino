/*
  TEST OLED DISPLAY - UpCycle Pro
  ================================
  
  Este sketch prueba la clase OLEDDisplay que maneja el display OLED
  del sistema de clasificaci√≥n usando las librer√≠as del proyecto.
  
  Librer√≠as utilizadas:
  - OLEDDisplay.h/.cpp (del proyecto UpCycle Pro)
  - Adafruit_SSD1306 y Adafruit_GFX (incluidas en OLEDDisplay)
  
  Conexiones:
  - OLED SDA: GPIO21 (compartido con PCA9685)
  - OLED SCL: GPIO22 (compartido con PCA9685)
  - OLED VCC: 3.3V ‚ö†Ô∏è IMPORTANTE (NO 5V)
  - OLED GND: GND
  
  Funcionamiento:
  - Usa la clase OLEDDisplay para control del display
  - M√©todos espec√≠ficos por pantalla del sistema
  - Iconos y gr√°ficos integrados
  - Control por comandos seriales
*/

// Incluir las librer√≠as del proyecto
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/OLEDDisplay.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/OLEDDisplay.cpp"

// LED indicador
#define LED_PIN 2

// Crear objeto OLEDDisplay
OLEDDisplay oledDisplay;

// Variables de control
unsigned long last_demo_change = 0;
unsigned long last_status_report = 0;
bool display_initialized = false;
bool auto_demo = true;
bool auto_report = true;
int demo_screen = 0;
unsigned long demo_interval = 4000; // 4 segundos
unsigned long status_interval = 10000; // 10 segundos

// Estad√≠sticas de pantallas mostradas
unsigned long recycle_screen_count = 0;
unsigned long material_screen_count = 0;
unsigned long mode_screen_count = 0;
unsigned long status_screen_count = 0;
unsigned long error_screen_count = 0;

void setup() {
  Serial.begin(115200);
  
  // Configurar LED indicador
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  Serial.println();
  Serial.println("üì∫ TEST OLED DISPLAY - UpCycle Pro");
  Serial.println("==================================");
  Serial.println();
  
  Serial.println("üìã Usando librer√≠as del proyecto:");
  Serial.println("- OLEDDisplay.h/.cpp");
  Serial.println("- Adafruit_SSD1306 y Adafruit_GFX (integradas)");
  Serial.println();
  
  // Inicializar I2C
  Wire.begin();
  
  // Inicializar OLEDDisplay
  Serial.println("üîÑ Inicializando OLEDDisplay...");
  if (oledDisplay.begin()) {
    display_initialized = true;
    Serial.println("‚úÖ OLEDDisplay inicializado correctamente");
    
    // LED indicador de √©xito
    for (int i = 0; i < 3; i++) {
      digitalWrite(LED_PIN, HIGH);
      delay(200);
      digitalWrite(LED_PIN, LOW);
      delay(200);
    }
    
    // Mostrar pantalla inicial
    Serial.println("üè† Mostrando pantalla de reciclaje inicial...");
    oledDisplay.showRecycleScreen();
    recycle_screen_count++;
    
  } else {
    Serial.println("‚ùå Error inicializando OLEDDisplay");
    Serial.println("   Verificar conexiones I2C y alimentaci√≥n 3.3V");
    while(1) {
      digitalWrite(LED_PIN, HIGH);
      delay(1000);
      digitalWrite(LED_PIN, LOW);
      delay(1000);
    }
  }
  
  Serial.println();
  Serial.println("üîß Configuraci√≥n OLEDDisplay:");
  Serial.println("- Resoluci√≥n: 128x32 pixels (SCREEN_WIDTH x SCREEN_HEIGHT)");
  Serial.println("- Direcci√≥n I2C: 0x3C (SCREEN_ADDRESS)");
  Serial.println("- √çcono reciclaje: Bitmap integrado 24x24");
  Serial.println("- M√©todos espec√≠ficos por pantalla del sistema");
  Serial.println();
  
  delay(3000); // Mostrar pantalla inicial
  
  printHelp();
}

void loop() {
  // Procesar comandos seriales
  if (Serial.available()) {
    processCommand();
  }
  
  // Demo autom√°tico de pantallas
  if (auto_demo && display_initialized && (millis() - last_demo_change > demo_interval)) {
    runAutoDemo();
    last_demo_change = millis();
  }
  
  // Reporte autom√°tico peri√≥dico
  if (auto_report && display_initialized && (millis() - last_status_report > status_interval)) {
    printStatusReport();
    last_status_report = millis();
  }
  
  delay(100);
}

void processCommand() {
  String command = Serial.readString();
  command.trim();
  command.toLowerCase();
  
  if (command == "recycle" || command == "home") {
    showRecycleScreen();
  } else if (command == "vidrio" || command == "1") {
    showVidrioScreen();
  } else if (command == "plastico" || command == "2") {
    showPlasticoScreen();
  } else if (command == "metal" || command == "3") {
    showMetalScreen();
  } else if (command == "mode1") {
    showMode1Screen();
  } else if (command == "mode2") {
    showMode2Screen();
  } else if (command == "mode3") {
    showMode3Screen();
  } else if (command == "waiting") {
    showWaitingScreen();
  } else if (command == "processing") {
    showProcessingScreen();
  } else if (command == "error") {
    showErrorScreen();
  } else if (command == "weight") {
    showWeightScreen();
  } else if (command == "clear") {
    clearDisplay();
  } else if (command == "demo" || command == "d") {
    auto_demo = !auto_demo;
    Serial.print("üîÑ Demo autom√°tico: ");
    Serial.println(auto_demo ? "ACTIVADO" : "DESACTIVADO");
    if (!auto_demo) {
      Serial.println("   Demo pausado en pantalla actual");
    }
  } else if (command == "status" || command == "s") {
    printFullStatus();
  } else if (command == "auto" || command == "a") {
    auto_report = !auto_report;
    Serial.print("üîÑ Reporte autom√°tico: ");
    Serial.println(auto_report ? "ACTIVADO" : "DESACTIVADO");
  } else if (command == "stats") {
    printStatistics();
  } else if (command == "clear_stats") {
    clearStatistics();
  } else if (command == "test") {
    runDisplayTest();
  } else if (command == "sequence") {
    runScreenSequence();
  } else if (command == "return") {
    // Usar m√©todo de retorno autom√°tico
    Serial.println("üîÑ Activando retorno autom√°tico a pantalla principal");
    oledDisplay.returnToMainScreen();
  } else if (command == "help" || command == "h") {
    printHelp();
  } else {
    Serial.println("‚ùå Comando no reconocido");
    Serial.println("üí° Env√≠a 'help' para ver comandos disponibles");
  }
}

void showRecycleScreen() {
  if (!display_initialized) return;
  
  Serial.println("‚ôªÔ∏è Mostrando pantalla de reciclaje");
  Serial.println("   Usando oledDisplay.showRecycleScreen()...");
  
  oledDisplay.showRecycleScreen();
  recycle_screen_count++;
  
  digitalWrite(LED_PIN, HIGH);
  delay(100);
  digitalWrite(LED_PIN, LOW);
  
  Serial.println("   ‚úÖ Pantalla de reciclaje mostrada");
}

void showVidrioScreen() {
  if (!display_initialized) return;
  
  Serial.println("üîµ Mostrando pantalla VIDRIO");
  Serial.println("   Usando oledDisplay.showVidrio()...");
  
  oledDisplay.showVidrio();
  material_screen_count++;
  
  digitalWrite(LED_PIN, HIGH);
  delay(100);
  digitalWrite(LED_PIN, LOW);
  
  Serial.println("   ‚úÖ Pantalla VIDRIO mostrada");
}

void showPlasticoScreen() {
  if (!display_initialized) return;
  
  Serial.println("üü† Mostrando pantalla PLASTICO");
  Serial.println("   Usando oledDisplay.showPlastico()...");
  
  oledDisplay.showPlastico();
  material_screen_count++;
  
  digitalWrite(LED_PIN, HIGH);
  delay(100);
  digitalWrite(LED_PIN, LOW);
  
  Serial.println("   ‚úÖ Pantalla PLASTICO mostrada");
}

void showMetalScreen() {
  if (!display_initialized) return;
  
  Serial.println("‚ö´ Mostrando pantalla METAL");
  Serial.println("   Usando oledDisplay.showMetal()...");
  
  oledDisplay.showMetal();
  material_screen_count++;
  
  digitalWrite(LED_PIN, HIGH);
  delay(100);
  digitalWrite(LED_PIN, LOW);
  
  Serial.println("   ‚úÖ Pantalla METAL mostrada");
}

void showMode1Screen() {
  if (!display_initialized) return;
  
  Serial.println("1Ô∏è‚É£ Mostrando modo 1 (VIDRIO)");
  Serial.println("   Usando oledDisplay.showMode1()...");
  
  oledDisplay.showMode1();
  mode_screen_count++;
  
  Serial.println("   ‚úÖ Modo 1 mostrado");
}

void showMode2Screen() {
  if (!display_initialized) return;
  
  Serial.println("2Ô∏è‚É£ Mostrando modo 2 (PLASTICO)");
  Serial.println("   Usando oledDisplay.showMode2()...");
  
  oledDisplay.showMode2();
  mode_screen_count++;
  
  Serial.println("   ‚úÖ Modo 2 mostrado");
}

void showMode3Screen() {
  if (!display_initialized) return;
  
  Serial.println("3Ô∏è‚É£ Mostrando modo 3 (METAL)");
  Serial.println("   Usando oledDisplay.showMode3()...");
  
  oledDisplay.showMode3();
  mode_screen_count++;
  
  Serial.println("   ‚úÖ Modo 3 mostrado");
}

void showWaitingScreen() {
  if (!display_initialized) return;
  
  Serial.println("‚è≥ Mostrando pantalla ESPERANDO");
  Serial.println("   Usando oledDisplay.showWaiting()...");
  
  oledDisplay.showWaiting("VIDRIO");
  status_screen_count++;
  
  Serial.println("   ‚úÖ Pantalla ESPERANDO mostrada");
}

void showProcessingScreen() {
  if (!display_initialized) return;
  
  Serial.println("‚öôÔ∏è Mostrando pantalla PROCESANDO");
  Serial.println("   Usando oledDisplay.showProcessing()...");
  
  oledDisplay.showProcessing("PLASTICO");
  status_screen_count++;
  
  Serial.println("   ‚úÖ Pantalla PROCESANDO mostrada");
}

void showErrorScreen() {
  if (!display_initialized) return;
  
  Serial.println("‚ùå Mostrando pantalla ERROR");
  Serial.println("   Usando oledDisplay.showError()...");
  
  oledDisplay.showError("Test Error");
  error_screen_count++;
  
  Serial.println("   ‚úÖ Pantalla ERROR mostrada");
}

void showWeightScreen() {
  if (!display_initialized) return;
  
  Serial.println("‚öñÔ∏è Mostrando peso simulado");
  Serial.println("   Usando oledDisplay.showWeight()...");
  
  oledDisplay.showWeight(1.25); // 1.25 kg simulado
  status_screen_count++;
  
  Serial.println("   ‚úÖ Pantalla PESO mostrada");
}

void clearDisplay() {
  if (!display_initialized) return;
  
  Serial.println("üßπ Limpiando display");
  Serial.println("   Usando oledDisplay.clear()...");
  
  oledDisplay.clear();
  
  Serial.println("   ‚úÖ Display limpiado");
}

void runAutoDemo() {
  switch(demo_screen) {
    case 0:
      Serial.println("üîÑ Demo: Pantalla de reciclaje");
      oledDisplay.showRecycleScreen();
      recycle_screen_count++;
      break;
    case 1:
      Serial.println("üîÑ Demo: Modo 1 (VIDRIO)");
      oledDisplay.showMode1();
      mode_screen_count++;
      break;
    case 2:
      Serial.println("üîÑ Demo: Esperando VIDRIO");
      oledDisplay.showWaiting("VIDRIO");
      status_screen_count++;
      break;
    case 3:
      Serial.println("üîÑ Demo: Pantalla PLASTICO");
      oledDisplay.showPlastico();
      material_screen_count++;
      break;
    case 4:
      Serial.println("üîÑ Demo: Procesando METAL");
      oledDisplay.showProcessing("METAL");
      status_screen_count++;
      break;
    case 5:
      Serial.println("üîÑ Demo: Peso 2.34 kg");
      oledDisplay.showWeight(2.34);
      status_screen_count++;
      break;
  }
  
  demo_screen = (demo_screen + 1) % 6;
}

void printHelp() {
  Serial.println("üéÆ COMANDOS DISPONIBLES:");
  Serial.println("========================");
  Serial.println("PANTALLAS PRINCIPALES:");
  Serial.println("- 'recycle' o 'home' = Pantalla reciclaje (showRecycleScreen)");
  Serial.println("- 'vidrio' o '1' = Pantalla VIDRIO (showVidrio)");
  Serial.println("- 'plastico' o '2' = Pantalla PLASTICO (showPlastico)");
  Serial.println("- 'metal' o '3' = Pantalla METAL (showMetal)");
  Serial.println();
  Serial.println("MODOS DEL SISTEMA:");
  Serial.println("- 'mode1' = Modo 1 VIDRIO (showMode1)");
  Serial.println("- 'mode2' = Modo 2 PLASTICO (showMode2)");
  Serial.println("- 'mode3' = Modo 3 METAL (showMode3)");
  Serial.println();
  Serial.println("ESTADOS DEL SISTEMA:");
  Serial.println("- 'waiting' = Pantalla ESPERANDO (showWaiting)");
  Serial.println("- 'processing' = Pantalla PROCESANDO (showProcessing)");
  Serial.println("- 'error' = Pantalla ERROR (showError)");
  Serial.println("- 'weight' = Mostrar peso (showWeight)");
  Serial.println();
  Serial.println("CONTROL:");
  Serial.println("- 'clear' = Limpiar display (clear)");
  Serial.println("- 'demo' o 'd' = Activar/desactivar demo autom√°tico");
  Serial.println("- 'status' o 's' = Estado completo del sistema");
  Serial.println("- 'auto' o 'a' = Activar/desactivar reporte autom√°tico");
  Serial.println("- 'stats' = Estad√≠sticas de pantallas");
  Serial.println("- 'clear_stats' = Limpiar estad√≠sticas");
  Serial.println("- 'test' = Prueba completa de pantallas");
  Serial.println("- 'sequence' = Secuencia de todas las pantallas");
  Serial.println("- 'return' = Activar retorno autom√°tico (returnToMainScreen)");
  Serial.println("- 'help' o 'h' = Mostrar esta ayuda");
  Serial.println();
}

void printStatusReport() {
  Serial.print("üì∫ Display: ");
  Serial.print(display_initialized ? "‚úÖ" : "‚ùå");
  Serial.print(" | Demo: ");
  Serial.print(auto_demo ? "ON" : "OFF");
  Serial.print(" | Pantallas: R=");
  Serial.print(recycle_screen_count);
  Serial.print(" M=");
  Serial.print(material_screen_count);
  Serial.print(" Mo=");
  Serial.print(mode_screen_count);
  Serial.print(" S=");
  Serial.print(status_screen_count);
  Serial.println();
}

void printFullStatus() {
  Serial.println("üìã ESTADO COMPLETO - OLED DISPLAY");
  Serial.println("=================================");
  Serial.println();
  
  Serial.println("üîß Configuraci√≥n OLEDDisplay:");
  Serial.println("- Clase: OLEDDisplay del proyecto UpCycle Pro");
  Serial.println("- Controlador: SSD1306 en I2C");
  Serial.println("- Resoluci√≥n: 128x32 pixels");
  Serial.println("- Direcci√≥n: 0x3C");
  Serial.println("- Alimentaci√≥n: 3.3V");
  Serial.println();
  
  Serial.print("‚öôÔ∏è Estado de inicializaci√≥n: ");
  Serial.println(display_initialized ? "‚úÖ INICIALIZADO" : "‚ùå ERROR");
  
  if (display_initialized) {
    Serial.println();
    Serial.println("üìä M√©todos disponibles:");
    Serial.println("- showRecycleScreen(): Pantalla principal con √≠cono");
    Serial.println("- showVidrio(), showPlastico(), showMetal(): Materiales");
    Serial.println("- showMode1(), showMode2(), showMode3(): Modos del sistema");
    Serial.println("- showWaiting(), showProcessing(): Estados");
    Serial.println("- showWeight(), showError(): Informaci√≥n adicional");
    Serial.println("- clear(), returnToMainScreen(): Control");
    Serial.println();
    
    Serial.print("‚öôÔ∏è Configuraci√≥n:");
    Serial.print(" Demo autom√°tico=");
    Serial.print(auto_demo ? "ON" : "OFF");
    Serial.print(" | Reporte autom√°tico=");
    Serial.print(auto_report ? "ON" : "OFF");
    Serial.print(" | Demo actual=");
    Serial.println(demo_screen);
    Serial.println();
  }
  
  printStatistics();
}

void printStatistics() {
  Serial.println("üìà ESTAD√çSTICAS DE PANTALLAS:");
  Serial.print("- Pantalla reciclaje: ");
  Serial.println(recycle_screen_count);
  Serial.print("- Pantallas materiales: ");
  Serial.println(material_screen_count);
  Serial.print("- Pantallas modos: ");
  Serial.println(mode_screen_count);
  Serial.print("- Pantallas estado: ");
  Serial.println(status_screen_count);
  Serial.print("- Pantallas error: ");
  Serial.println(error_screen_count);
  Serial.print("- Total pantallas mostradas: ");
  Serial.println(recycle_screen_count + material_screen_count + mode_screen_count + status_screen_count + error_screen_count);
  Serial.println();
}

void clearStatistics() {
  recycle_screen_count = 0;
  material_screen_count = 0;
  mode_screen_count = 0;
  status_screen_count = 0;
  error_screen_count = 0;
  
  Serial.println("üîÑ Estad√≠sticas de pantallas limpiadas");
  Serial.println("üìä Todos los contadores reseteados a 0");
}

void runDisplayTest() {
  if (!display_initialized) {
    Serial.println("‚ùå No se puede ejecutar test - OLEDDisplay no inicializado");
    return;
  }
  
  Serial.println("üß™ PRUEBA COMPLETA DEL DISPLAY");
  Serial.println("===============================");
  Serial.println();
  
  Serial.println("Esta prueba mostrar√° todas las pantallas disponibles");
  Serial.println("usando los m√©todos de la clase OLEDDisplay.");
  Serial.println();
  
  // Test 1: Pantalla principal
  Serial.println("1Ô∏è‚É£ Pantalla de reciclaje");
  oledDisplay.showRecycleScreen();
  delay(2000);
  
  // Test 2: Modos
  Serial.println("2Ô∏è‚É£ Modos del sistema");
  Serial.println("   Modo 1 (VIDRIO)");
  oledDisplay.showMode1();
  delay(1500);
  Serial.println("   Modo 2 (PLASTICO)");
  oledDisplay.showMode2();
  delay(1500);
  Serial.println("   Modo 3 (METAL)");
  oledDisplay.showMode3();
  delay(1500);
  
  // Test 3: Materiales
  Serial.println("3Ô∏è‚É£ Pantallas de materiales");
  Serial.println("   VIDRIO");
  oledDisplay.showVidrio();
  delay(1500);
  Serial.println("   PLASTICO");
  oledDisplay.showPlastico();
  delay(1500);
  Serial.println("   METAL");
  oledDisplay.showMetal();
  delay(1500);
  
  // Test 4: Estados
  Serial.println("4Ô∏è‚É£ Estados del sistema");
  Serial.println("   ESPERANDO");
  oledDisplay.showWaiting("VIDRIO");
  delay(1500);
  Serial.println("   PROCESANDO");
  oledDisplay.showProcessing("PLASTICO");
  delay(1500);
  
  // Test 5: Informaci√≥n adicional
  Serial.println("5Ô∏è‚É£ Informaci√≥n adicional");
  Serial.println("   Peso");
  oledDisplay.showWeight(3.47);
  delay(1500);
  Serial.println("   Error");
  oledDisplay.showError("Test Error");
  delay(1500);
  
  // Test 6: Limpieza y retorno
  Serial.println("6Ô∏è‚É£ Limpieza y retorno");
  Serial.println("   Limpiar display");
  oledDisplay.clear();
  delay(1000);
  Serial.println("   Retorno a pantalla principal");
  oledDisplay.showRecycleScreen();
  
  Serial.println();
  Serial.println("üìã RESUMEN DEL TEST:");
  Serial.println("- Pantalla reciclaje: ‚úÖ OK");
  Serial.println("- Modos (1,2,3): ‚úÖ OK");
  Serial.println("- Materiales (V,P,M): ‚úÖ OK");
  Serial.println("- Estados (Esperando/Procesando): ‚úÖ OK");
  Serial.println("- Informaci√≥n adicional: ‚úÖ OK");
  Serial.println("- Limpieza y control: ‚úÖ OK");
  Serial.println();
  Serial.println("üéâ ¬°Todas las pantallas funcionan correctamente!");
  Serial.println();
}

void runScreenSequence() {
  if (!display_initialized) {
    Serial.println("‚ùå No se puede ejecutar secuencia - OLEDDisplay no inicializado");
    return;
  }
  
  Serial.println("üîÑ SECUENCIA COMPLETA DE PANTALLAS");
  Serial.println("==================================");
  Serial.println();
  
  Serial.println("Ejecutando secuencia de todas las pantallas disponibles");
  Serial.println("con transiciones suaves...");
  Serial.println();
  
  String screens[] = {
    "Reciclaje", "Modo 1", "Esperando VIDRIO", "VIDRIO detectado",
    "Procesando VIDRIO", "Modo 2", "Esperando PLASTICO", "PLASTICO detectado", 
    "Procesando PLASTICO", "Modo 3", "Esperando METAL", "METAL detectado",
    "Procesando METAL", "Peso: 2.15 kg", "Retorno a inicio"
  };
  
  for (int i = 0; i < 15; i++) {
    Serial.print("   ");
    Serial.print(i + 1);
    Serial.print("/15: ");
    Serial.println(screens[i]);
    
    switch(i) {
      case 0: oledDisplay.showRecycleScreen(); break;
      case 1: oledDisplay.showMode1(); break;
      case 2: oledDisplay.showWaiting("VIDRIO"); break;
      case 3: oledDisplay.showVidrio(); break;
      case 4: oledDisplay.showProcessing("VIDRIO"); break;
      case 5: oledDisplay.showMode2(); break;
      case 6: oledDisplay.showWaiting("PLASTICO"); break;
      case 7: oledDisplay.showPlastico(); break;
      case 8: oledDisplay.showProcessing("PLASTICO"); break;
      case 9: oledDisplay.showMode3(); break;
      case 10: oledDisplay.showWaiting("METAL"); break;
      case 11: oledDisplay.showMetal(); break;
      case 12: oledDisplay.showProcessing("METAL"); break;
      case 13: oledDisplay.showWeight(2.15); break;
      case 14: oledDisplay.showRecycleScreen(); break;
    }
    
    delay(1500);
  }
  
  Serial.println();
  Serial.println("üéâ ¬°Secuencia completa finalizada!");
  Serial.println("üìä Total transiciones: 15");
  Serial.println();
}

/*
===============================================================================
                                MANUAL DE USO
===============================================================================

üéØ OBJETIVO:
Probar la clase OLEDDisplay del proyecto UpCycle Pro que controla el display
OLED con m√©todos espec√≠ficos para cada pantalla del sistema.

üìö LIBRER√çAS UTILIZADAS:
- OLEDDisplay.h/.cpp (del proyecto UpCycle Pro)
- Adafruit_SSD1306 y Adafruit_GFX (integradas)
- M√©todos espec√≠ficos por pantalla del sistema de clasificaci√≥n

üîß CONFIGURACI√ìN:
1. Conectar OLED seg√∫n documentaci√≥n del proyecto:
   - SDA: GPIO21 (compartido con PCA9685)
   - SCL: GPIO22 (compartido con PCA9685)
   - VCC: 3.3V ‚ö†Ô∏è IMPORTANTE (NO 5V)
   - GND: GND

2. Subir este sketch al ESP32
3. Abrir Monitor Serial (115200 baud)

üìã CARACTER√çSTICAS DE OLEDDisplay:
- Resoluci√≥n 128x32 optimizada para el sistema
- √çcono de reciclaje integrado (bitmap 24x24)
- M√©todos espec√≠ficos por pantalla del sistema:
  * showRecycleScreen(): Pantalla principal
  * showVidrio(), showPlastico(), showMetal(): Materiales
  * showMode1(), showMode2(), showMode3(): Modos
  * showWaiting(), showProcessing(): Estados
  * showWeight(), showError(): Informaci√≥n
- Texto centrado autom√°tico
- Retorno autom√°tico a pantalla principal
- Control de actualizaci√≥n optimizado

üéÆ COMANDOS DISPONIBLES:

PANTALLAS PRINCIPALES:
- 'recycle' o 'home': Pantalla reciclaje con √≠cono
- 'vidrio' o '1': Pantalla material VIDRIO
- 'plastico' o '2': Pantalla material PLASTICO
- 'metal' o '3': Pantalla material METAL

MODOS DEL SISTEMA:
- 'mode1': Modo 1 VIDRIO (n√∫mero grande)
- 'mode2': Modo 2 PLASTICO (n√∫mero grande)
- 'mode3': Modo 3 METAL (n√∫mero grande)

ESTADOS:
- 'waiting': Pantalla ESPERANDO material
- 'processing': Pantalla PROCESANDO material
- 'error': Pantalla de ERROR
- 'weight': Mostrar peso en kg

CONTROL Y PRUEBAS:
- 'demo' o 'd': Activar/desactivar demo autom√°tico
- 'test': Prueba completa de todas las pantallas
- 'sequence': Secuencia simulando funcionamiento real
- 'clear': Limpiar display
- 'return': Activar retorno autom√°tico

üìã PROCEDIMIENTO DE PRUEBA:

DEMO AUTOM√ÅTICO:
1. Sistema muestra autom√°ticamente diferentes pantallas cada 4 segundos
2. Secuencia: Reciclaje ‚Üí Modo 1 ‚Üí Esperando ‚Üí Material ‚Üí Procesando ‚Üí Peso
3. Activar/desactivar con comando 'demo'

PRUEBA MANUAL:
1. Probar cada pantalla individualmente con comandos espec√≠ficos
2. Verificar que texto se muestra correctamente centrado
3. Comprobar √≠cono de reciclaje en pantalla principal

PRUEBA AUTOM√ÅTICA:
1. Comando 'test': Prueba sistem√°tica de todas las pantallas
2. Comando 'sequence': Simula secuencia real de funcionamiento
3. Verificar transiciones suaves entre pantallas

‚úÖ RESULTADOS ESPERADOS:
- OLEDDisplay se inicializa sin errores
- Todas las pantallas se muestran correctamente
- Texto centrado y legible en resoluci√≥n 128x32
- √çcono de reciclaje se muestra en pantalla principal
- Transiciones suaves entre pantallas
- M√©todos espec√≠ficos funcionan correctamente
- Retorno autom√°tico a pantalla principal

‚ùå PROBLEMAS Y SOLUCIONES:

"OLEDDisplay no inicializa":
- Verificar conexiones I2C (SDA=21, SCL=22)
- Verificar alimentaci√≥n 3.3V (NO 5V - puede da√±ar)
- Verificar direcci√≥n I2C 0x3C
- Probar con I2C scanner primero

"Pantalla en blanco":
- Verificar que display sea SSD1306 128x32
- Comprobar que se llama update() despu√©s de cambios
- Verificar calidad de conexiones I2C
- Revisar alimentaci√≥n estable 3.3V

"Texto cortado o mal centrado":
- Verificar resoluci√≥n configurada (128x32)
- Comprobar implementaci√≥n de drawCenteredText()
- Ajustar tama√±os de fuente para pantalla peque√±a

"√çcono no se muestra":
- Verificar bitmap integrado (recycleBitmap)
- Comprobar implementaci√≥n de drawRecycleIcon()
- Verificar espacio suficiente en pantalla 32 pixels altura

üìä INTERPRETACI√ìN:
- Inicializaci√≥n correcta: Hardware funcionando
- Todas las pantallas OK: Software integrado correctamente
- Texto legible: Configuraci√≥n de fuentes apropiada
- Transiciones suaves: Control de timing optimizado

üéØ VENTAJAS DE USAR OLEDDisplay:
- M√©todos espec√≠ficos para cada pantalla del sistema
- √çcono personalizado integrado
- Texto centrado autom√°tico
- Optimizado para resoluci√≥n 128x32
- Gesti√≥n autom√°tica de actualizaciones
- Retorno autom√°tico a pantalla principal
- C√≥digo m√°s limpio y mantenible
- F√°cil integraci√≥n con SimpleClassifier

üîß CARACTER√çSTICAS ESPEC√çFICAS DEL PROYECTO:
- Dise√±ado espec√≠ficamente para UpCycle Pro
- Pantallas optimizadas para clasificaci√≥n de materiales
- Integraci√≥n directa con estados del sistema
- √çcono de reciclaje personalizado
- Mensajes espec√≠ficos del dominio (VIDRIO, PLASTICO, METAL)

===============================================================================
*/