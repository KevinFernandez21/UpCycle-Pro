/*
  TEST SIMPLE CLASSIFIER - Sistema Completo UpCycle Pro
  ====================================================
  
  Este sketch prueba la clase SimpleClassifier completa que integra todos 
  los componentes del sistema (PIR, Motor, Servos, OLED).
  
  Caracter√≠sticas probadas:
  - Integraci√≥n completa de todos los componentes
  - Estados del sistema (IDLE, WAITING, PROCESSING)
  - Comandos seriales para control
  - Timeout autom√°tico
  - Pantalla OLED con diferentes modos
  - Clasificaci√≥n autom√°tica por material
  
  Hardware necesario:
  - ESP32
  - 3 sensores PIR (GPIO26, 27, 14)
  - Motor con 2N222 (GPIO25)
  - PCA9685 para servos
  - OLED SSD1306 (I2C)
  
  Comandos disponibles:
  - '1': Activar modo VIDRIO (PIR1 ‚Üí Servo1)
  - '2': Activar modo PLASTICO (PIR2 ‚Üí Servo2)
  - '3': Activar modo METAL (PIR3 ‚Üí Servo3)
  - 'stop': Detener sistema
  - 'status': Ver estado
  - 'help': Ver comandos
*/

// Incluir la librer√≠a completa del proyecto
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/SimpleClassifier.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/SimpleClassifier.cpp"

// Incluir todas las dependencias necesarias
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/PIRManager.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/PIRManager.cpp"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/ConveyorMotor.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/ConveyorMotor.cpp"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/ServoManager.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/ServoManager.cpp"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/OLEDDisplay.h"
#include "C:/Users/hombr/Desktop/projects/programacion/UpCycle-Pro/microcontrolador/UpCyclePRO_microcontrolador/OLEDDisplay.cpp"

// ===============================================================================
// OBJETOS GLOBALES
// ===============================================================================

SimpleClassifier classifier;

// ===============================================================================
// SETUP
// ===============================================================================

void setup() {
  Serial.begin(115200);
  
  Serial.println();
  Serial.println("üß™ TEST SIMPLE CLASSIFIER - Sistema Completo UpCycle Pro");
  Serial.println("=========================================================");
  Serial.println();
  
  // Inicializar el sistema completo
  if (!classifier.begin()) {
    Serial.println("‚ùå Error inicializando SimpleClassifier");
    Serial.println("üîÑ Reiniciando en 5 segundos...");
    delay(5000);
    ESP.restart();
  }
  
  Serial.println("‚úÖ SimpleClassifier inicializado correctamente");
  Serial.println("üéÆ Env√≠a comandos por Serial Monitor:");
  Serial.println();
  
  printTestInstructions();
}

// ===============================================================================
// LOOP PRINCIPAL
// ===============================================================================

void loop() {
  // Actualizar el clasificador (verifica sensores, timeouts, etc.)
  classifier.update();
  
  // Procesar comandos seriales
  if (Serial.available()) {
    String command = Serial.readString();
    command.trim();
    command.toLowerCase();
    
    processCommand(command);
  }
  
  delay(50); // Peque√±a pausa para estabilidad
}

// ===============================================================================
// PROCESAMIENTO DE COMANDOS
// ===============================================================================

void processCommand(String command) {
  Serial.println("üì® Comando recibido: '" + command + "'");
  
  if (command == "1") {
    Serial.println("üîµ MODO VIDRIO seleccionado");
    classifier.setMode(1);
    
  } else if (command == "2") {
    Serial.println("üü† MODO PLASTICO seleccionado");
    classifier.setMode(2);
    
  } else if (command == "3") {
    Serial.println("‚ö´ MODO METAL seleccionado");
    classifier.setMode(3);
    
  } else if (command == "stop") {
    Serial.println("üõë DETENIENDO SISTEMA");
    classifier.stopSystem();
    
  } else if (command == "status") {
    classifier.printStatus();
    
  } else if (command == "help") {
    classifier.printHelp();
    printTestInstructions();
    
  } else if (command == "test") {
    runSystemTest();
    
  } else if (command == "demo") {
    runDemoSequence();
    
  } else {
    Serial.println("‚ùå Comando no reconocido: '" + command + "'");
    Serial.println("üí° Escribe 'help' para ver comandos disponibles");
  }
  
  Serial.println();
}

// ===============================================================================
// FUNCIONES DE TEST
// ===============================================================================

void runSystemTest() {
  Serial.println("üß™ EJECUTANDO TEST DEL SISTEMA");
  Serial.println("===============================");
  
  // Test 1: Verificar estado inicial
  Serial.println("1Ô∏è‚É£ Verificando estado inicial...");
  classifier.printStatus();
  delay(2000);
  
  // Test 2: Probar modo VIDRIO
  Serial.println("2Ô∏è‚É£ Probando modo VIDRIO...");
  classifier.setMode(1);
  delay(3000);
  
  // Test 3: Detener sistema
  Serial.println("3Ô∏è‚É£ Deteniendo sistema...");
  classifier.stopSystem();
  delay(2000);
  
  // Test 4: Probar modo PLASTICO
  Serial.println("4Ô∏è‚É£ Probando modo PLASTICO...");
  classifier.setMode(2);
  delay(3000);
  
  // Test 5: Detener sistema
  Serial.println("5Ô∏è‚É£ Deteniendo sistema...");
  classifier.stopSystem();
  delay(2000);
  
  // Test 6: Probar modo METAL
  Serial.println("6Ô∏è‚É£ Probando modo METAL...");
  classifier.setMode(3);
  delay(3000);
  
  // Test 7: Detener sistema
  Serial.println("7Ô∏è‚É£ Test completado - Sistema detenido");
  classifier.stopSystem();
  
  Serial.println("‚úÖ TEST DEL SISTEMA COMPLETADO");
  Serial.println("üìã Todos los modos han sido probados correctamente");
  Serial.println();
}

void runDemoSequence() {
  Serial.println("üé¨ EJECUTANDO SECUENCIA DE DEMOSTRACI√ìN");
  Serial.println("======================================");
  
  Serial.println("üì± Esta secuencia simula un ciclo completo de clasificaci√≥n");
  Serial.println("üîÑ Se activar√° cada modo por 10 segundos");
  Serial.println();
  
  // Demo modo VIDRIO
  Serial.println("üîµ DEMO MODO VIDRIO - 10 segundos");
  classifier.setMode(1);
  delay(10000);
  classifier.stopSystem();
  delay(2000);
  
  // Demo modo PLASTICO
  Serial.println("üü† DEMO MODO PLASTICO - 10 segundos");
  classifier.setMode(2);
  delay(10000);
  classifier.stopSystem();
  delay(2000);
  
  // Demo modo METAL
  Serial.println("‚ö´ DEMO MODO METAL - 10 segundos");
  classifier.setMode(3);
  delay(10000);
  classifier.stopSystem();
  
  Serial.println("‚úÖ DEMOSTRACI√ìN COMPLETADA");
  Serial.println("üéØ Sistema listo para uso manual");
  Serial.println();
}

void printTestInstructions() {
  Serial.println("üìö INSTRUCCIONES DE PRUEBA:");
  Serial.println("============================");
  Serial.println("COMANDOS B√ÅSICOS:");
  Serial.println("  1, 2, 3   ‚Üí Seleccionar modo de clasificaci√≥n");
  Serial.println("  stop      ‚Üí Detener sistema");
  Serial.println("  status    ‚Üí Ver estado actual");
  Serial.println("  help      ‚Üí Mostrar ayuda");
  Serial.println();
  Serial.println("COMANDOS DE TEST:");
  Serial.println("  test      ‚Üí Ejecutar test autom√°tico completo");
  Serial.println("  demo      ‚Üí Ejecutar demostraci√≥n de 30 segundos");
  Serial.println();
  Serial.println("C√ìMO PROBAR:");
  Serial.println("1. Env√≠a '1' para activar modo VIDRIO");
  Serial.println("2. Acerca un objeto al sensor PIR1 (GPIO26)");
  Serial.println("3. Observa que el motor se detiene y el servo1 se activa");
  Serial.println("4. El sistema vuelve a modo espera autom√°ticamente");
  Serial.println("5. Repite con modos 2 y 3 para otros materiales");
  Serial.println();
  Serial.println("‚ö†Ô∏è  NOTAS IMPORTANTES:");
  Serial.println("- El sistema tiene timeout de 30 segundos en modo espera");
  Serial.println("- El motor funciona mientras espera detecci√≥n");
  Serial.println("- La pantalla OLED muestra el estado actual");
  Serial.println("- Los servos se activan por 1.5 segundos");
  Serial.println();
}

/*
===============================================================================
                                MANUAL DE USO
===============================================================================

üéØ OBJETIVO:
Probar la integraci√≥n completa del sistema SimpleClassifier que combina
todos los componentes del proyecto UpCycle Pro en una sola clase.

üîß HARDWARE NECESARIO:
- ESP32
- 3 sensores PIR conectados a GPIO26, 27, 14
- Motor con transistor 2N222 en GPIO25
- PCA9685 para control de 3 servos
- Display OLED SSD1306 en I2C (SDA=21, SCL=22)

üìã PROCEDIMIENTO DE PRUEBA:

FASE 1 - INICIALIZACI√ìN:
1. Subir sketch al ESP32
2. Abrir Monitor Serial (115200 baud)
3. Verificar que todos los componentes se inicialicen correctamente
4. Debe aparecer "Sistema inicializado correctamente"

FASE 2 - PRUEBA MANUAL:
1. Enviar comando '1' ‚Üí Sistema entra en modo VIDRIO
2. Motor debe empezar a funcionar
3. OLED debe mostrar "ESPERANDO VIDRIO"
4. Acercar objeto a PIR1 (GPIO26)
5. Motor debe detenerse, servo1 debe activarse
6. Despu√©s de 1.5s sistema vuelve a espera

FASE 3 - PRUEBA AUTOM√ÅTICA:
1. Enviar comando 'test' ‚Üí Ejecuta secuencia autom√°tica
2. Verifica que todos los modos funcionan
3. Observa transiciones de estado en OLED

FASE 4 - PRUEBA DE TIMEOUT:
1. Activar cualquier modo (1, 2 o 3)
2. NO acercar objetos a sensores
3. Esperar 30 segundos
4. Sistema debe detectar timeout y detenerse autom√°ticamente

FASE 5 - PRUEBA DE DEMOSTRACI√ìN:
1. Enviar comando 'demo'
2. Observa secuencia autom√°tica de 30 segundos
3. Cada modo se activa por 10 segundos

üéÆ COMANDOS PRINCIPALES:
- '1': Modo VIDRIO (PIR1 ‚Üí Servo1)
- '2': Modo PLASTICO (PIR2 ‚Üí Servo2) 
- '3': Modo METAL (PIR3 ‚Üí Servo3)
- 'stop': Detener sistema
- 'status': Ver estado completo
- 'test': Test autom√°tico
- 'demo': Demostraci√≥n de 30s
- 'help': Ayuda completa

‚úÖ RESULTADOS ESPERADOS:

INICIALIZACI√ìN:
- Todos los componentes se inicializan sin errores
- OLED muestra pantalla principal "UpCyclePro"
- Sistema entra en estado IDLE

FUNCIONAMIENTO NORMAL:
- Comandos 1,2,3 activan modo correspondiente
- Motor funciona durante espera de detecci√≥n
- PIR sensors detectan objetos correctamente
- Servos se activan cuando corresponde
- OLED muestra estado actual siempre
- Sistema vuelve a espera despu√©s de clasificar

MANEJO DE ERRORES:
- Timeout autom√°tico despu√©s de 30 segundos
- Comandos inv√°lidos muestran error
- Sistema recupera estado IDLE correctamente

‚ùå PROBLEMAS COMUNES:

"Error inicializando OLED":
- Verificar conexiones I2C (SDA=21, SCL=22)
- Comprobar direcci√≥n I2C del display (0x3C)
- Sistema contin√∫a funcionando sin display

"Error inicializando servos":
- Verificar conexi√≥n del PCA9685
- Comprobar alimentaci√≥n de 5V para servos
- Verificar direcci√≥n I2C del PCA9685

"PIR no detecta":
- Verificar conexiones GPIO26, 27, 14
- Comprobar alimentaci√≥n 5V de sensores PIR
- Esperar 2-3 segundos para estabilizaci√≥n PIR

"Motor no funciona":
- Verificar conexi√≥n GPIO25
- Comprobar transistor 2N222 y resistencias
- Verificar alimentaci√≥n del motor

"Timeout muy frecuente":
- Sensores PIR pueden estar detectando movimiento falso
- Ajustar sensibilidad de los sensores
- Revisar interferencias electromagn√©ticas

üìä MONITOREO:
- Estado del sistema se muestra en Serial Monitor
- OLED display muestra informaci√≥n visual
- LEDs de estado en PCA9685 indican actividad servos
- Motor audible indica funcionamiento normal

üöÄ SIGUIENTE PASO:
Una vez confirmado el funcionamiento correcto, integrar con:
- Sistema MQTT para control remoto
- Node-RED dashboard para monitoreo
- Base de datos para estad√≠sticas
- Alertas autom√°ticas por problemas

===============================================================================
*/